#!/usr/bin/env python
import sys
import os
from sstools.commands.filter_bam import filter_bam
from sstools.commands.mark_duplicate import mark_duplicate
from sstools.commands.mark_region import mark_region
from sstools.commands.mark_haplotype import mark_haplotype
from sstools.commands.stat_bin_read import stat_bin_read
from sstools.commands.plot_bin_read import plot_bin_read
from sstools.commands.benchmark_snp import benchmark_snp
from sstools.commands.stat_genomic_coverage import StatGenomicCoverage
from sstools.commands.stat_duplicate import StatDuplicate
from sstools.commands.calculate_cwr import CalculateCWR
from sstools.commands.stat_cell_haplotype import StatCellHaplotype
from sstools.commands.pileup import Pileup
from sstools.commands.cell_stats import CellStats
from sstools.commands.fetch_cc_regions import FetchCCRegion
from sstools.commands.make_cc_composite import MakeCCComposite
from sstools.commands.call_inversion import CallInversion
from sstools.commands.fetch_wc_regions import FetchWCRegion
from sstools.commands.stat_mapped_length import StatMappedLen

usage = """
Tools for Strand-seq analysis.

Usage: %s <command> [options]

Commands:
    -- Developed
       FilterBam        Filter bam file for Strand-seq.
       MarkDuplicate    Mark duplicates for Strand-seq.
       MarkRegion       Mark regions, such as whitelist or blacklist.
       MarkHaplotype    Mark the parental for each read according to provided HET SNVs.
       StatBinRead      Calculate bin read count.
       PlotBinRead      Plot bin read count.
       
       StatGenomicCov   Statistic genomic coverage.
       StatDuplicate    Statistic PCR duplicate.
       CalculateCWR     Calculate Crick/Watson ratio.
       
       StatCellHap      Statistic single-cell haplotype precision.
       Pileup           Pileup base matrix.
       CellStats        Report GC content, sequencing depth, background, spikiness, genomic coverage.
       FetchCCRegion
       MakeCCComposite
       CallInversion
       FetchWCRegion
       
       BenchmarkSNP     Benchmark of SNPs.
       CalGenomeDepth   Calculate genome depth.
       DownsamplBam     Downsample BAM file.   

    -- Developing
       
    -- Round 1 assembly

    -- Round 2 assembly

    -- Assembly
       ClusterCells
       SplitHaplotype
       MakeBaseMatrix
       MergeBaseMatrix
       

""" % os.path.basename(__file__)

def main():
    if len(sys.argv) == 1:
        print("Error: please provide command.")
        print(usage)
        exit(1)
        
    command = sys.argv[1]
    if command == "FilterBam":
        filter_bam(sys.argv[2:])
    elif command == "MarkDuplicate":
        mark_duplicate(sys.argv[2:])
    elif command == "MarkRegion":
        mark_region(sys.argv[2:])
    elif command == "MarkHaplotype":
        mark_haplotype(sys.argv[2:])
    elif command == "StatBinRead":
        stat_bin_read(sys.argv[2:])
    elif command == "PlotBinRead":
        plot_bin_read(sys.argv[2:])
    elif command == "CalGenomeDepth":
        from sstools.commands.cal_genome_depth import cal_genome_depth
        cal_genome_depth(sys.argv[2:])
    elif command == "StatGenomicCov":
        StatGenomicCoverage()
    elif command == "StatDuplicate":
        StatDuplicate()
    elif command == "CalculateCWR":
        CalculateCWR()
    elif command == "BenchmarkSNP":
        benchmark_snp(sys.argv[2:])
    elif command == "DownsampleBam":
        from sstools.commands.downsample_bam import downsample_bam
        downsample_bam(sys.argv[2:])
    elif command == "StatCellHap":
        StatCellHaplotype()
    elif command == "Pileup":
        Pileup()
    elif command == "CellStats":
        CellStats()
    elif command == "FetchCCRegion":
        FetchCCRegion()
    elif command == "MakeCCComposite":
        MakeCCComposite()
    elif command == "CallInversion":
        CallInversion()
    elif command == "FetchWCRegion":
        FetchWCRegion()
    elif command == "StatMappedLen":
        StatMappedLen()
    else:
        print("Error: unknown command %s." % command)
        print(usage)
        exit(1)


if __name__ == '__main__':
    main()
    
