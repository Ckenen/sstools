#!/usr/bin/env python
import sys
import os
from sstools.commands.filter_bam import FilterBam
from sstools.commands.mark_haplotype import MarkHaplotype
from sstools.commands.mark_duplicate import MarkDuplicate
from sstools.commands.mark_region import MarkRegion
from sstools.commands.stat_genomic_coverage import StatGenomicCoverage
from sstools.commands.stat_duplicate import StatDuplicate
from sstools.commands.calculate_cwr import CalculateCWR
from sstools.commands.stat_bin_read import StatBinRead
from sstools.commands.stat_cell_haplotype import StatCellHaplotype
from sstools.commands.pileup import Pileup
from sstools.commands.cell_stats import CellStats
from sstools.commands.fetch_cc_regions import FetchCCRegion
from sstools.commands.make_cc_composite import MakeCCComposite
from sstools.commands.call_inversion import CallInversion
from sstools.commands.fetch_wc_regions import FetchWCRegion
from sstools.commands.stat_mapped_length import StatMappedLen

usage = """
Tools for Strand-seq analysis.

Usage: %s <command> [options]

Commands:
    -- Developed
       FilterBam        Filter bam file for Strand-seq.
       MarkDuplicate    Mark duplicates for Strand-seq.
       MarkRegion       Mark regions, such as whitelist or blacklist.
       MarkHaplotype    Mark the parental for each read according to provided HET SNVs.
       StatGenomicCov   Statistic genomic coverage.
       StatDuplicate    Statistic PCR duplicate.
       CalculateCWR     Calculate Crick/Watson ratio.
       StatBinRead      Statistic read count for each bin and plot barplot.
       StatCellHap      Statistic single-cell haplotype precision.
       Pileup           Pileup base matrix.
       CellStats        Report GC content, sequencing depth, background, spikiness, genomic coverage.
       FetchCCRegion
       MakeCCComposite
       CallInversion
       FetchWCRegion

    -- Developing
       
    -- Round 1 assembly

    -- Round 2 assembly

    -- Assembly
       ClusterCells
       SplitHaplotype
       MakeBaseMatrix
       MergeBaseMatrix
       

""" % os.path.basename(__file__)

def main():
    if len(sys.argv) == 1:
        print("Error: please provide command.")
        print(usage)
        exit(1)
        
    command = sys.argv[1]
    if command == "FilterBam":
        FilterBam()
    elif command == "MarkHaplotype":
        MarkHaplotype()
    elif command == "MarkDuplicate":
        MarkDuplicate()
    elif command == "MarkRegion":
        MarkRegion()
    elif command == "StatGenomicCov":
        StatGenomicCoverage()
    elif command == "StatDuplicate":
        StatDuplicate()
    elif command == "CalculateCWR":
        CalculateCWR()
    elif command == "StatBinRead":
        StatBinRead()
    elif command == "StatCellHap":
        StatCellHaplotype()
    elif command == "Pileup":
        Pileup()
    elif command == "CellStats":
        CellStats()
    elif command == "FetchCCRegion":
        FetchCCRegion()
    elif command == "MakeCCComposite":
        MakeCCComposite()
    elif command == "CallInversion":
        CallInversion()
    elif command == "FetchWCRegion":
        FetchWCRegion()
    elif command == "StatMappedLen":
        StatMappedLen()
    else:
        print("Error: unknown command %s." % command)
        print(usage)
        exit(1)


if __name__ == '__main__':
    main()
    
