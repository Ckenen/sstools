#!/usr/bin/env python
import sys
import os

from sstools.commands.benchmark_snp import benchmark_snp
from sstools.commands.stat_duplicate import StatDuplicate
from sstools.commands.calculate_cwr import CalculateCWR
from sstools.commands.stat_cell_haplotype import StatCellHaplotype
from sstools.commands.pileup import Pileup
from sstools.commands.cell_stats import CellStats
from sstools.commands.fetch_wc_regions import FetchWCRegion
from sstools.commands.downsample_bam import downsample_bam

usage = """
Tools for Strand-seq analysis.

Usage: %s <command> [options]

Commands:
    -- Post-mapping processing
       FilterBam        Filter bam file for Strand-seq.
       MarkDuplicate    Mark duplicates for Strand-seq.
       MarkRegion       Mark regions, such as whitelist or blacklist.
       MarkHaplotype    Mark the parental for each read according to provided HET SNVs.
       
    -- Statistic
       StatLength       Analysis fragment length.
       StatGC           Analysis fragment GC content.
       StatBackground   Estimate background.
       StatCoverage     Calculate genomic coverage.
       StatDepth        Calculate genome depth.
       
       StatDuplicate    Statistic PCR duplicate.
       CellStats        Report GC content, sequencing depth, background, spikiness, genomic coverage.
       
    -- Counting bin reads
       StatBinRead      Calculate bin read count.
       PlotBinRead      Plot bin read count.
       
    -- Developed
       ExtremeRegion    Scan extreme coverage regions.
       
       
       
       CalculateCWR     Calculate Crick/Watson ratio.
       
       StatCellHap      Statistic single-cell haplotype precision.
       
       Pileup           Pileup base matrix.
       FetchCCRegion
       MakeCCComposite
       CallInversion
       FetchWCRegion
       BenchmarkSNP     Benchmark of SNPs.
       DownsamplBam     Downsample BAM file.   

    -- Under developing
       
    -- Round 1 assembly

    -- Round 2 assembly

    -- Assembly
       ClusterCells
       SplitHaplotype
       MakeBaseMatrix
       MergeBaseMatrix
""" % os.path.basename(__file__)

def main():
    if len(sys.argv) <= 1:
        print("Error: please provide command.")
        print(usage)
        exit(1)
        
    assert os.path.basename(sys.argv[0]) == "sstools"
    command = sys.argv[1]
    args = sys.argv[2:]
    functions = dict()
    
    # Post-mapping processing
    
    from sstools.commands.filter_bam import filter_bam
    functions["FilterBam"] = filter_bam
    from sstools.commands.mark_duplicate import mark_duplicate
    functions["MarkDuplicate"] = mark_duplicate
    from sstools.commands.mark_region import mark_region
    functions["MarkRegion"] = mark_region
    from sstools.commands.mark_haplotype import mark_haplotype
    functions["MarkHaplotype"] = mark_haplotype
    
    # Statistic
    
    from sstools.commands.stat_length import stat_length
    functions["StatLength"] = stat_length
    from sstools.commands.stat_gc import stat_gc
    functions["StatGC"] = stat_gc
    from sstools.commands.stat_gc_density import stat_gc_density
    functions["StatGCDensity"] = stat_gc_density
    from sstools.commands.stat_background import stat_background
    functions["StatBackground"] = stat_background
    from sstools.commands.stat_spikiness import stat_spikiness
    functions["StatSpikiness"] = stat_spikiness
    from sstools.commands.stat_depth import stat_depth
    functions["StatDepth"] = stat_depth
    from sstools.commands.stat_coverage import stat_coverage
    functions["StatCoverage"] = stat_coverage
    
    # Bin reads
    
    from sstools.commands.stat_bin_read import stat_bin_read
    functions["StatBinRead"] = stat_bin_read
    from sstools.commands.plot_bin_read import plot_bin_read
    functions["PlotBinRead"] = plot_bin_read
    
    # Inversions
    
    from sstools.commands.fetch_cc_regions import fetch_cc_regions
    functions["FetchCCRegion"] = fetch_cc_regions
    from sstools.commands.make_cc_composite import make_cc_composite
    functions["MakeCCComposite"] = make_cc_composite
    from sstools.commands.call_inversion import call_inversion
    functions["CallInversion"] = call_inversion
    
    # Utilities
    
    from sstools.commands.quantify_sv import quantify_sv
    functions["QuantifySV"] = quantify_sv
    from sstools.commands.bam_to_bigwig import bam_to_bigwig
    functions["BamToBigWig"] = bam_to_bigwig
    
    from sstools.commands.scan_extreme_region import scan_extreme_region
    functions["ExtremeRegion"] = scan_extreme_region
    
    if command in functions:
        functions[command](args)
        exit(0)
    else:
        print("Error: unknown command %s." % command)
        print(usage)
        exit(1)
    
    if command == "FilterBam":
        filter_bam(args)
    elif command == "MarkDuplicate":
        mark_duplicate(args)
    elif command == "MarkRegion":
        mark_region(args)
    elif command == "MarkHaplotype":
        mark_haplotype(args)
    elif command == "StatBinRead":
        stat_bin_read(sys.argv[2:])
    elif command == "PlotBinRead":
        plot_bin_read(sys.argv[2:])
    elif command == "StatDuplicate":
        StatDuplicate()
    elif command == "CalculateCWR":
        CalculateCWR()
    elif command == "BenchmarkSNP":
        benchmark_snp(sys.argv[2:])
    elif command == "DownsampleBam":
        downsample_bam(sys.argv[2:])
    elif command == "StatCellHap":
        StatCellHaplotype()
    elif command == "Pileup":
        Pileup()
    elif command == "CellStats":
        CellStats()
    elif command == "FetchWCRegion":
        FetchWCRegion()
    else:
        print("Error: unknown command %s." % command)
        print(usage)
        exit(1)


if __name__ == '__main__':
    main()
    
